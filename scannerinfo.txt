5. Barcode Scanning Library
Your app uses QuaggaJS for barcode scanning.
This is a popular open-source JavaScript barcode scanner that works in the browser using the device camera.
Itâ€™s loaded via CDN in your index.html:
Apply to scanner.js
The logic is in your js/scanner.js file.

/ Barcode Scanner Controller using QuaggaJS
class ScannerController {
    constructor() {
        this.isScanning = false;
        this.lastScannedCode = null;
        this.scanTimeout = null;
    }

    async startScanning() {
        if (this.isScanning) return;

        try {
            // Check if camera is available
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                throw new Error('Camera access not supported');
            }

            // Request camera permission
            await navigator.mediaDevices.getUserMedia({ video: true });

            this.isScanning = true;
            this.lastScannedCode = null;
            this.initializeQuagga();

        } catch (error) {
            console.error('Error starting scanner:', error);
            this.showCameraError();
        }
    }

    stopScanning() {
        if (!this.isScanning) return;

        this.isScanning = false;
        
        if (Quagga) {
            Quagga.stop();
        }

        // Clear any pending timeouts
        if (this.scanTimeout) {
            clearTimeout(this.scanTimeout);
            this.scanTimeout = null;
        }
    }

    initializeQuagga() {
        Quagga.init({
            inputStream: {
                name: "Live",
                type: "LiveStream",
                target: "#scanner-viewport",
                constraints: {
                    width: { min: 640, ideal: 1920 },
                    height: { min: 480, ideal: 1080 },
                    facingMode: "environment",
                    aspectRatio: { ideal: 1.7777777778 }
                },
            },
            locator: {
                patchSize: "medium",
                halfSample: false
            },
            numOfWorkers: navigator.hardwareConcurrency || 4,
            frequency: 10,
            decoder: {
                readers: [
                    "ean_reader"
                ]
            },
            locate: true
        }, (err) => {
            if (err) {
                console.error('Quagga initialization failed:', err);
                this.showCameraError();
                return;
            }

            console.log('Quagga initialized successfully');
            Quagga.start();
        });

        // Handle successful scans
        Quagga.onDetected((result) => {
            this.handleScanResult(result);
        });
    }

    handleScanResult(result) {
        const code = result.codeResult.code;
        
        // Stop scanning immediately to prevent multiple detections
        this.stopScanning();

        console.log('Barcode detected:', code);

        // Provide haptic feedback
        this.provideHapticFeedback();

        // Pass the result to the main app
        if (window.app) {
            window.app.handleScannedProduct(code);
        }
    }

    provideHapticFeedback() {
        // Haptic feedback for supported devices
        if (navigator.vibrate) {
            navigator.vibrate(100);
        }

        // Audio feedback (optional)
        this.playScanSound();
    }

    playScanSound() {
        // Create a simple beep sound
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();

        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);

        oscillator.frequency.value = 800;
        oscillator.type = 'sine';

        gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);

        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.1);
    }

    showCameraError() {
        const viewport = document.getElementById('scanner-viewport');
        if (viewport) {
            viewport.innerHTML = `
                <div style="
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    justify-content: center;
                    height: 100%;
                    color: white;
                    text-align: center;
                    padding: 20px;
                ">
                    <div style="font-size: 3rem; margin-bottom: 1rem;">ðŸ“·</div>
                    <h3>Camera Access Required</h3>
                    <p>Please allow camera access to scan barcodes, or use the manual entry below.</p>
                    <button onclick="scannerController.startScanning()" 
                            style="
                                margin-top: 1rem;
                                padding: 0.5rem 1rem;
                                background: #1e40af;
                                color: white;
                                border: none;
                                border-radius: 8px;
                                cursor: pointer;
                            ">
                        Try Again
                    </button>
                </div>
            `;
        }
    }

    // Manual barcode entry helper
    setManualBarcode(code) {
        const input = document.getElementById('manual-barcode');
        if (input) {
            input.value = code;
        }
    }

    // Cleanup when leaving scanner screen
    cleanup() {
        this.stopScanning();
        this.lastScannedCode = null;
    }
}

// Initialize scanner controller
window.scannerController = new ScannerController();

// Cleanup scanner when page is unloaded
window.addEventListener('beforeunload', () => {
    if (window.scannerController) {
        window.scannerController.cleanup();
    }
}); 